// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model School {
  id             String  @id @default(cuid())
  name           String
  logo           String?
  primaryColor   String? @map(name: "primary_color")
  secondaryColor String? @map(name: "secondary_color")
  games          Game[]
  User           User?   @relation(fields: [userId], references: [id])
  userId         String?

  @@map(name: "schools")
}

model Game {
  id       String    @id @default(cuid())
  teams    School[]
  location String?
  date     DateTime?
  sport    Sport     @relation(fields: [sportId], references: [id])
  sportId  String
  User     User?     @relation(fields: [userId], references: [id])
  userId   String?

  @@map(name: "games")
}

model Sport {
  id     String  @id @default(cuid())
  name   String
  games  Game[]
  userId String?
  users  User[]

  @@map(name: "sports")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  favoriteSports  Sport[]
  favoriteSchools School[]
  favoriteGames   Game[]
  accounts        Account[]
  sessions        Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
